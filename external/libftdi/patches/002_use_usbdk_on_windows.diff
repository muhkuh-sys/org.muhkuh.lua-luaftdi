diff -uNr libftdi1-1.4/src/ftdi.c libftdi1-1.4_patched/src/ftdi.c
--- libftdi1-1.4/src/ftdi.c	2017-08-07 16:52:39.000000000 +0200
+++ libftdi1-1.4_patched/src/ftdi.c	2018-10-08 15:43:10.562427303 +0200
@@ -87,6 +87,9 @@
 */
 int ftdi_init(struct ftdi_context *ftdi)
 {
+#ifdef _WIN32
+    int ret;
+#endif
     struct ftdi_eeprom* eeprom = (struct ftdi_eeprom *)malloc(sizeof(struct ftdi_eeprom));
     ftdi->usb_ctx = NULL;
     ftdi->usb_dev = NULL;
@@ -108,6 +111,15 @@
     if (libusb_init(&ftdi->usb_ctx) < 0)
         ftdi_error_return(-3, "libusb_init() failed");
 
+#ifdef _WIN32
+    /* Enable USBDK on windows. */
+    ret = libusb_set_option(ftdi->usb_ctx, LIBUSB_OPTION_USE_USBDK);
+    if (ret != LIBUSB_SUCCESS)
+    {
+        fprintf(stderr, "libusb_set_option(LIBUSB_OPTION_USE_USBDK) failed: %d\n", ret);
+    }
+#endif
+
     ftdi_set_interface(ftdi, INTERFACE_ANY);
     ftdi->bitbang_mode = 1; /* when bitbang is enabled this holds the number of the mode  */
 
@@ -564,36 +576,12 @@
     return packet_size;
 }
 
-/**
-    Opens a ftdi device given by an usb_device.
-
-    \param ftdi pointer to ftdi_context
-    \param dev libusb usb_dev to use
-
-    \retval  0: all fine
-    \retval -3: unable to config device
-    \retval -4: unable to open device
-    \retval -5: unable to claim device
-    \retval -6: reset failed
-    \retval -7: set baudrate failed
-    \retval -8: ftdi context invalid
-    \retval -9: libusb_get_device_descriptor() failed
-    \retval -10: libusb_get_config_descriptor() failed
-    \retval -11: libusb_detach_kernel_driver() failed
-    \retval -12: libusb_get_configuration() failed
-*/
-int ftdi_usb_open_dev(struct ftdi_context *ftdi, libusb_device *dev)
+static int ftdi_usb_open_dev_continue(struct ftdi_context *ftdi, libusb_device *dev)
 {
     struct libusb_device_descriptor desc;
     struct libusb_config_descriptor *config0;
     int cfg, cfg0, detach_errno = 0;
 
-    if (ftdi == NULL)
-        ftdi_error_return(-8, "ftdi context invalid");
-
-    if (libusb_open(dev, &ftdi->usb_dev) < 0)
-        ftdi_error_return(-4, "libusb_open() failed");
-
     if (libusb_get_device_descriptor(dev, &desc) < 0)
         ftdi_error_return(-9, "libusb_get_device_descriptor() failed");
 
@@ -686,6 +674,38 @@
     ftdi_error_return(0, "all fine");
 }
 
+
+/**
+    Opens a ftdi device given by an usb_device.
+
+    \param ftdi pointer to ftdi_context
+    \param dev libusb usb_dev to use
+
+    \retval  0: all fine
+    \retval -3: unable to config device
+    \retval -4: unable to open device
+    \retval -5: unable to claim device
+    \retval -6: reset failed
+    \retval -7: set baudrate failed
+    \retval -8: ftdi context invalid
+    \retval -9: libusb_get_device_descriptor() failed
+    \retval -10: libusb_get_config_descriptor() failed
+    \retval -11: libusb_detach_kernel_driver() failed
+    \retval -12: libusb_get_configuration() failed
+*/
+int ftdi_usb_open_dev(struct ftdi_context *ftdi, libusb_device *dev)
+{
+
+
+    if (ftdi == NULL)
+        ftdi_error_return(-8, "ftdi context invalid");
+
+    if (libusb_open(dev, &ftdi->usb_dev) < 0)
+       ftdi_error_return(-4, "libusb_open() failed");
+
+    return ftdi_usb_open_dev_continue(ftdi, dev);
+}
+
 /**
     Opens the first device with a given vendor and product ids.
 
@@ -806,15 +826,15 @@
                 }
             }
 
-            ftdi_usb_close_internal (ftdi);
+
 
             if (index > 0)
             {
+                ftdi_usb_close_internal (ftdi);
                 index--;
                 continue;
             }
-
-            res = ftdi_usb_open_dev(ftdi, dev);
+            res = ftdi_usb_open_dev_continue(ftdi, dev);
             libusb_free_device_list(devs,1);
             return res;
         }
