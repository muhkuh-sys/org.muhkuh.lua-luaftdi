
#ifdef __cplusplus
extern "C" {
#endif
#include "ftdi.h"
#include "lua.h"
#ifdef __cplusplus
}
#endif


#include <stdint.h>


#ifndef SWIGRUNTIME
#include <swigluarun.h>
#endif



#ifndef __WRAPPER_H__
#define __WRAPPER_H__


enum FTDI_CHIP_TYPE
{
	__ENUM_TYPE_AM = TYPE_AM,
	__ENUM_TYPE_BM = TYPE_BM,
	__ENUM_TYPE_2232C = TYPE_2232C,
	__ENUM_TYPE_R = TYPE_R,
	__ENUM_TYPE_2232H = TYPE_2232H,
	__ENUM_TYPE_4232H = TYPE_4232H,
	__ENUM_TYPE_232H = TYPE_232H,
	__ENUM_TYPE_230X = TYPE_230X
};


/** Parity mode for ftdi_set_line_property() */
enum FTDI_PARITY_TYPE
{
	__ENUM_NONE = NONE,
	__ENUM_ODD = ODD,
	__ENUM_EVEN = EVEN,
	__ENUM_MARK = MARK,
	__ENUM_SPACE = SPACE
};
/** Number of stop bits for ftdi_set_line_property() */
enum FTDI_STOPBITS_TYPE
{
	__ENUM_STOP_BIT_1 = STOP_BIT_1,
	__ENUM_STOP_BIT_15 = STOP_BIT_15,
	__ENUM_STOP_BIT_2 = STOP_BIT_2
};
/** Number of bits for ftdi_set_line_property() */
enum FTDI_BITS_TYPE
{
	__ENUM_BITS_7 = BITS_7,
	__ENUM_BITS_8 = BITS_8
};
/** Break type for ftdi_set_line_property2() */
enum FTDI_BREAK_TYPE
{
	__ENUM_BREAK_OFF = BREAK_OFF,
	__ENUM_BREAK_ON = BREAK_ON
};

enum FTDI_MPSSE_MODE
{
	__ENUM_BITMODE_RESET = BITMODE_RESET,
	__ENUM_BITMODE_BITBANG = BITMODE_BITBANG,
	__ENUM_BITMODE_MPSSE = BITMODE_MPSSE,
	__ENUM_BITMODE_SYNCBB = BITMODE_SYNCBB,
	__ENUM_BITMODE_MCU = BITMODE_MCU,
	__ENUM_BITMODE_OPTO = BITMODE_OPTO,
	__ENUM_BITMODE_CBUS = BITMODE_CBUS,
	__ENUM_BITMODE_SYNCFF = BITMODE_SYNCFF,
	__ENUM_BITMODE_FT1284 = BITMODE_FT1284
};

/** Port interface for chips with multiple interfaces */
enum FTDI_INTERFACE
{
	__ENUM_INTERFACE_ANY = INTERFACE_ANY,
	__ENUM_INTERFACE_A = INTERFACE_A,
	__ENUM_INTERFACE_B = INTERFACE_B,
	__ENUM_INTERFACE_C = INTERFACE_C,
	__ENUM_INTERFACE_D = INTERFACE_D
};

/** Automatic loading / unloading of kernel modules */
enum FTDI_MODULE_DETACH_MODE
{
	__ENUM_AUTO_DETACH_SIO_MODULE = AUTO_DETACH_SIO_MODULE,
	__ENUM_DONT_DETACH_SIO_MODULE = DONT_DETACH_SIO_MODULE
};

enum FTDI_MPSSE
{
	__ENUM_MPSSE_WRITE_NEG = MPSSE_WRITE_NEG,
	__ENUM_MPSSE_BITMODE = MPSSE_BITMODE,
	__ENUM_MPSSE_READ_NEG = MPSSE_READ_NEG,
	__ENUM_MPSSE_LSB = MPSSE_LSB,
	__ENUM_MPSSE_DO_WRITE = MPSSE_DO_WRITE,
	__ENUM_MPSSE_DO_READ = MPSSE_DO_READ,
	__ENUM_MPSSE_WRITE_TMS = MPSSE_WRITE_TMS,
	__ENUM_SET_BITS_LOW = SET_BITS_LOW,
	__ENUM_SET_BITS_HIGH = SET_BITS_HIGH,
	__ENUM_GET_BITS_LOW = GET_BITS_LOW,
	__ENUM_GET_BITS_HIGH = GET_BITS_HIGH,
	__ENUM_LOOPBACK_START = LOOPBACK_START,
	__ENUM_LOOPBACK_END = LOOPBACK_END,
	__ENUM_TCK_DIVISOR = TCK_DIVISOR,
	__ENUM_DIS_DIV_5 = DIS_DIV_5,
	__ENUM_EN_DIV_5 = EN_DIV_5,
	__ENUM_EN_3_PHASE = EN_3_PHASE,
	__ENUM_DIS_3_PHASE = DIS_3_PHASE,
	__ENUM_CLK_BITS = CLK_BITS,
	__ENUM_CLK_BYTES = CLK_BYTES,
	__ENUM_CLK_WAIT_HIGH = CLK_WAIT_HIGH,
	__ENUM_CLK_WAIT_LOW = CLK_WAIT_LOW,
	__ENUM_EN_ADAPTIVE = EN_ADAPTIVE,
	__ENUM_DIS_ADAPTIVE = DIS_ADAPTIVE,
	__ENUM_CLK_BYTES_OR_HIGH = CLK_BYTES_OR_HIGH,
	__ENUM_CLK_BYTES_OR_LOW = CLK_BYTES_OR_LOW,
	__ENUM_DRIVE_OPEN_COLLECTOR = DRIVE_OPEN_COLLECTOR,
	__ENUM_SEND_IMMEDIATE = SEND_IMMEDIATE,
	__ENUM_WAIT_ON_HIGH = WAIT_ON_HIGH,
	__ENUM_WAIT_ON_LOW = WAIT_ON_LOW,
	__ENUM_READ_SHORT = READ_SHORT,
	__ENUM_READ_EXTENDED = READ_EXTENDED,
	__ENUM_WRITE_SHORT = WRITE_SHORT,
	__ENUM_WRITE_EXTENDED = WRITE_EXTENDED,
	__ENUM_SIO_RESET = SIO_RESET,
	__ENUM_SIO_MODEM_CTRL = SIO_MODEM_CTRL,
	__ENUM_SIO_SET_FLOW_CTRL = SIO_SET_FLOW_CTRL,
	__ENUM_SIO_SET_BAUD_RATE = SIO_SET_BAUD_RATE,
	__ENUM_SIO_SET_DATA = SIO_SET_DATA,
	__ENUM_SIO_RESET_REQUEST = SIO_RESET_REQUEST,
	__ENUM_SIO_SET_BAUDRATE_REQUEST = SIO_SET_BAUDRATE_REQUEST,
	__ENUM_SIO_SET_DATA_REQUEST = SIO_SET_DATA_REQUEST,
	__ENUM_SIO_SET_FLOW_CTRL_REQUEST = SIO_SET_FLOW_CTRL_REQUEST,
	__ENUM_SIO_SET_MODEM_CTRL_REQUEST = SIO_SET_MODEM_CTRL_REQUEST,
	__ENUM_SIO_POLL_MODEM_STATUS_REQUEST = SIO_POLL_MODEM_STATUS_REQUEST,
	__ENUM_SIO_SET_EVENT_CHAR_REQUEST = SIO_SET_EVENT_CHAR_REQUEST,
	__ENUM_SIO_SET_ERROR_CHAR_REQUEST = SIO_SET_ERROR_CHAR_REQUEST,
	__ENUM_SIO_SET_LATENCY_TIMER_REQUEST = SIO_SET_LATENCY_TIMER_REQUEST,
	__ENUM_SIO_GET_LATENCY_TIMER_REQUEST = SIO_GET_LATENCY_TIMER_REQUEST,
	__ENUM_SIO_SET_BITMODE_REQUEST = SIO_SET_BITMODE_REQUEST,
	__ENUM_SIO_READ_PINS_REQUEST = SIO_READ_PINS_REQUEST,
	__ENUM_SIO_READ_EEPROM_REQUEST = SIO_READ_EEPROM_REQUEST,
	__ENUM_SIO_WRITE_EEPROM_REQUEST = SIO_WRITE_EEPROM_REQUEST,
	__ENUM_SIO_ERASE_EEPROM_REQUEST = SIO_ERASE_EEPROM_REQUEST,
	__ENUM_SIO_RESET_SIO = SIO_RESET_SIO,
	__ENUM_SIO_RESET_PURGE_RX = SIO_RESET_PURGE_RX,
	__ENUM_SIO_RESET_PURGE_TX = SIO_RESET_PURGE_TX,
	__ENUM_SIO_DISABLE_FLOW_CTRL = SIO_DISABLE_FLOW_CTRL,
	__ENUM_SIO_RTS_CTS_HS = SIO_RTS_CTS_HS,
	__ENUM_SIO_DTR_DSR_HS = SIO_DTR_DSR_HS,
	__ENUM_SIO_XON_XOFF_HS = SIO_XON_XOFF_HS,
	__ENUM_SIO_SET_DTR_MASK = SIO_SET_DTR_MASK,
	__ENUM_SIO_SET_DTR_HIGH = SIO_SET_DTR_HIGH,
	__ENUM_SIO_SET_DTR_LOW = SIO_SET_DTR_LOW,
	__ENUM_SIO_SET_RTS_MASK = SIO_SET_RTS_MASK,
	__ENUM_SIO_SET_RTS_HIGH = SIO_SET_RTS_HIGH,
	__ENUM_SIO_SET_RTS_LOW = SIO_SET_RTS_LOW
};


enum FTDI_EEPROM_VALUE
{
	__ENUM_VENDOR_ID = VENDOR_ID,
	__ENUM_PRODUCT_ID = PRODUCT_ID,
	__ENUM_SELF_POWERED = SELF_POWERED,
	__ENUM_REMOTE_WAKEUP = REMOTE_WAKEUP,
	__ENUM_IS_NOT_PNP = IS_NOT_PNP,
	__ENUM_SUSPEND_DBUS7 = SUSPEND_DBUS7,
	__ENUM_IN_IS_ISOCHRONOUS = IN_IS_ISOCHRONOUS,
	__ENUM_OUT_IS_ISOCHRONOUS = OUT_IS_ISOCHRONOUS,
	__ENUM_SUSPEND_PULL_DOWNS = SUSPEND_PULL_DOWNS,
	__ENUM_USE_SERIAL = USE_SERIAL,
	__ENUM_USB_VERSION = USB_VERSION,
	__ENUM_USE_USB_VERSION = USE_USB_VERSION,
	__ENUM_MAX_POWER = MAX_POWER,
	__ENUM_CHANNEL_A_TYPE = CHANNEL_A_TYPE,
	__ENUM_CHANNEL_B_TYPE = CHANNEL_B_TYPE,
	__ENUM_CHANNEL_A_DRIVER = CHANNEL_A_DRIVER,
	__ENUM_CHANNEL_B_DRIVER = CHANNEL_B_DRIVER,
	__ENUM_CBUS_FUNCTION_0 = CBUS_FUNCTION_0,
	__ENUM_CBUS_FUNCTION_1 = CBUS_FUNCTION_1,
	__ENUM_CBUS_FUNCTION_2 = CBUS_FUNCTION_2,
	__ENUM_CBUS_FUNCTION_3 = CBUS_FUNCTION_3,
	__ENUM_CBUS_FUNCTION_4 = CBUS_FUNCTION_4,
	__ENUM_CBUS_FUNCTION_5 = CBUS_FUNCTION_5,
	__ENUM_CBUS_FUNCTION_6 = CBUS_FUNCTION_6,
	__ENUM_CBUS_FUNCTION_7 = CBUS_FUNCTION_7,
	__ENUM_CBUS_FUNCTION_8 = CBUS_FUNCTION_8,
	__ENUM_CBUS_FUNCTION_9 = CBUS_FUNCTION_9,
	__ENUM_HIGH_CURRENT = HIGH_CURRENT,
	__ENUM_HIGH_CURRENT_A = HIGH_CURRENT_A,
	__ENUM_HIGH_CURRENT_B = HIGH_CURRENT_B,
	__ENUM_INVERT = INVERT,
	__ENUM_GROUP0_DRIVE = GROUP0_DRIVE,
	__ENUM_GROUP0_SCHMITT = GROUP0_SCHMITT,
	__ENUM_GROUP0_SLEW = GROUP0_SLEW,
	__ENUM_GROUP1_DRIVE = GROUP1_DRIVE,
	__ENUM_GROUP1_SCHMITT = GROUP1_SCHMITT,
	__ENUM_GROUP1_SLEW = GROUP1_SLEW,
	__ENUM_GROUP2_DRIVE = GROUP2_DRIVE,
	__ENUM_GROUP2_SCHMITT = GROUP2_SCHMITT,
	__ENUM_GROUP2_SLEW = GROUP2_SLEW,
	__ENUM_GROUP3_DRIVE = GROUP3_DRIVE,
	__ENUM_GROUP3_SCHMITT = GROUP3_SCHMITT,
	__ENUM_GROUP3_SLEW = GROUP3_SLEW,
	__ENUM_CHIP_SIZE = CHIP_SIZE,
	__ENUM_CHIP_TYPE = CHIP_TYPE,
	__ENUM_POWER_SAVE = POWER_SAVE,
	__ENUM_CLOCK_POLARITY = CLOCK_POLARITY,
	__ENUM_DATA_ORDER = DATA_ORDER,
	__ENUM_FLOW_CONTROL = FLOW_CONTROL,
	__ENUM_CHANNEL_C_DRIVER = CHANNEL_C_DRIVER,
	__ENUM_CHANNEL_D_DRIVER = CHANNEL_D_DRIVER,
	__ENUM_CHANNEL_A_RS485 = CHANNEL_A_RS485,
	__ENUM_CHANNEL_B_RS485 = CHANNEL_B_RS485,
	__ENUM_CHANNEL_C_RS485 = CHANNEL_C_RS485,
	__ENUM_CHANNEL_D_RS485 = CHANNEL_D_RS485,
	__ENUM_RELEASE_NUMBER = RELEASE_NUMBER,
	__ENUM_EXTERNAL_OSCILLATOR = EXTERNAL_OSCILLATOR,
	__ENUM_USER_DATA_ADDR = USER_DATA_ADDR
};

enum FTDI_CBUS
{
	__ENUM_CBUS_TXDEN = CBUS_TXDEN,
	__ENUM_CBUS_PWREN = CBUS_PWREN,
	__ENUM_CBUS_RXLED = CBUS_RXLED,
	__ENUM_CBUS_TXLED = CBUS_TXLED,
	__ENUM_CBUS_TXRXLED = CBUS_TXRXLED,
	__ENUM_CBUS_SLEEP = CBUS_SLEEP,
	__ENUM_CBUS_CLK48 = CBUS_CLK48,
	__ENUM_CBUS_CLK24 = CBUS_CLK24,
	__ENUM_CBUS_CLK12 = CBUS_CLK12,
	__ENUM_CBUS_CLK6 = CBUS_CLK6,
	__ENUM_CBUS_IOMODE = CBUS_IOMODE,
	__ENUM_CBUS_BB_WR = CBUS_BB_WR,
	__ENUM_CBUS_BB_RD = CBUS_BB_RD
};

enum FTDI_CBUSH
{
	__ENUM_CBUSH_TRISTATE = CBUSH_TRISTATE,
	__ENUM_CBUSH_TXLED = CBUSH_TXLED,
	__ENUM_CBUSH_RXLED = CBUSH_RXLED,
	__ENUM_CBUSH_TXRXLED = CBUSH_TXRXLED,
	__ENUM_CBUSH_PWREN = CBUSH_PWREN,
	__ENUM_CBUSH_SLEEP = CBUSH_SLEEP,
	__ENUM_CBUSH_DRIVE_0 = CBUSH_DRIVE_0,
	__ENUM_CBUSH_DRIVE1 = CBUSH_DRIVE1,
	__ENUM_CBUSH_IOMODE = CBUSH_IOMODE,
	__ENUM_CBUSH_TXDEN = CBUSH_TXDEN,
	__ENUM_CBUSH_CLK30 = CBUSH_CLK30,
	__ENUM_CBUSH_CLK15 = CBUSH_CLK15,
	__ENUM_CBUSH_CLK7_5 = CBUSH_CLK7_5
};

enum FTDI_CBUSX
{
	__ENUM_CBUSX_TRISTATE = CBUSX_TRISTATE,
	__ENUM_CBUSX_TXLED = CBUSX_TXLED,
	__ENUM_CBUSX_RXLED = CBUSX_RXLED,
	__ENUM_CBUSX_TXRXLED = CBUSX_TXRXLED,
	__ENUM_CBUSX_PWREN = CBUSX_PWREN,
	__ENUM_CBUSX_SLEEP = CBUSX_SLEEP,
	__ENUM_CBUSX_DRIVE_0 = CBUSX_DRIVE_0,
	__ENUM_CBUSX_DRIVE1 = CBUSX_DRIVE1,
	__ENUM_CBUSX_IOMODE = CBUSX_IOMODE,
	__ENUM_CBUSX_TXDEN = CBUSX_TXDEN,
	__ENUM_CBUSX_CLK24 = CBUSX_CLK24,
	__ENUM_CBUSX_CLK12 = CBUSX_CLK12,
	__ENUM_CBUSX_CLK6 = CBUSX_CLK6,
	__ENUM_CBUSX_BAT_DETECT = CBUSX_BAT_DETECT,
	__ENUM_CBUSX_BAT_DETECT_NEG = CBUSX_BAT_DETECT_NEG,
	__ENUM_CBUSX_I2C_TXE = CBUSX_I2C_TXE,
	__ENUM_CBUSX_I2C_RXF = CBUSX_I2C_RXF,
	__ENUM_CBUSX_VBUS_SENSE = CBUSX_VBUS_SENSE,
	__ENUM_CBUSX_BB_WR = CBUSX_BB_WR,
	__ENUM_CBUSX_BB_RD = CBUSX_BB_RD,
	__ENUM_CBUSX_TIME_STAMP = CBUSX_TIME_STAMP,
	__ENUM_CBUSX_AWAKE = CBUSX_AWAKE
};


enum FTDI_INVERT
{
	__ENUM_INVERT_TXD = INVERT_TXD,
	__ENUM_INVERT_RXD = INVERT_RXD,
	__ENUM_INVERT_RTS = INVERT_RTS,
	__ENUM_INVERT_CTS = INVERT_CTS,
	__ENUM_INVERT_DTR = INVERT_DTR,
	__ENUM_INVERT_DSR = INVERT_DSR,
	__ENUM_INVERT_DCD = INVERT_DCD,
	__ENUM_INVERT_RI = INVERT_RI
};


/** Interface Mode. */
enum FTDI_CHANNEL_IS
{
	__ENUM_CHANNEL_IS_UART = CHANNEL_IS_UART,
	__ENUM_CHANNEL_IS_FIFO = CHANNEL_IS_FIFO,
	__ENUM_CHANNEL_IS_OPTO = CHANNEL_IS_OPTO,
	__ENUM_CHANNEL_IS_CPU = CHANNEL_IS_CPU,
	__ENUM_CHANNEL_IS_FT1284 = CHANNEL_IS_FT1284,
	__ENUM_CHANNEL_IS_RS485 = CHANNEL_IS_RS485
};

enum FTDI_DRIVE
{
	__ENUM_DRIVE_4MA = DRIVE_4MA,
	__ENUM_DRIVE_8MA = DRIVE_8MA,
	__ENUM_DRIVE_12MA = DRIVE_12MA,
	__ENUM_DRIVE_16MA = DRIVE_16MA,
	__ENUM_SLOW_SLEW = SLOW_SLEW,
	__ENUM_IS_SCHMITT = IS_SCHMITT
};


/** Driver Type. */
enum FTDI_DRIVER
{
	__ENUM_DRIVER_VCP = DRIVER_VCP,
	__ENUM_DRIVER_VCPH = DRIVER_VCPH
};


enum FTDI_MISC
{
	__ENUM_USE_USB_VERSION_BIT = USE_USB_VERSION_BIT,
	__ENUM_SUSPEND_DBUS7_BIT = SUSPEND_DBUS7_BIT,
	__ENUM_HIGH_CURRENT_DRIVE = HIGH_CURRENT_DRIVE,
	__ENUM_HIGH_CURRENT_DRIVE_R = HIGH_CURRENT_DRIVE_R
};



#if defined(SWIG)
typedef struct
{
    int major;
    int minor;
    int micro;
    char *version_str;
    char *snapshot_str;
} FTDI_VERSION_INFO_T;
#else
typedef struct ftdi_version_info FTDI_VERSION_INFO_T;
#endif

FTDI_VERSION_INFO_T get_library_version(void);




class ListEntry
{
public:
	ListEntry(struct ftdi_context *ptContext, struct ftdi_device_list *ptDevice);
	~ListEntry(void);

	uint16_t get_vid(void);
	uint16_t get_pid(void);

	uint8_t get_bus_number(void);
	void get_port_number(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);
	void get_port_numbers(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);
	void get_device_address(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);

	void get_manufacturer(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);
	void get_description(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);
	void get_serial(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT_LIST, unsigned int *uiNUMBER_OF_CREATED_OBJECTS);

	struct libusb_device *get_usb_device(void);

private:
	int get_strings(void);

	struct ftdi_context *m_ptContext;
	struct libusb_device *m_ptUsbDevice;
	char *m_pcManufacturer;
	char *m_pcDescription;
	char *m_pcSerial;
};



class List
{
public:
	List(struct ftdi_context *ptContext, struct ftdi_device_list *ptDevlist);
	~List(void);

	ListEntry *next(struct ftdi_device_list *m_ptCurrentDevice);
	void iter(lua_State *MUHKUH_SWIG_OUTPUT_CUSTOM_OBJECT, swig_type_info *p_ListEntry);

	static int iterator_next(lua_State *ptLuaState);

private:
	struct ftdi_context *m_ptContext;
	struct ftdi_device_list *m_ptDevlist;
};



class TransferControl
{
public:
	TransferControl(struct ftdi_transfer_control *ptTransferControl);
	~TransferControl(void);

	int data_done(void);
	void data_cancel(long seconds, long useconds);

	void get_buffer(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT);
	int get_size(void);
	int get_offset(void);

private:
	struct ftdi_transfer_control *m_ptTransferControl;
};



typedef int RESULT_INT_TRUE_OR_NIL_WITH_ERR;
typedef int RESULT_INT_NOTHING_OR_NIL_WITH_ERR;
typedef int RESULT_INT_INT_OR_NIL_WITH_ERR;


class Eeprom
{
public:
	Eeprom(struct ftdi_context *ptContext);

	RESULT_INT_TRUE_OR_NIL_WITH_ERR initdefaults(char * manufacturer, char *product, char *serial);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_strings(char *manufacturer, char *product, char *serial);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_manufacturer(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_product(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_serial(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT);

	RESULT_INT_INT_OR_NIL_WITH_ERR build(void);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR decode(int verbose);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_value(enum ftdi_eeprom_value value_name, int *piARGUMENT_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_value(enum ftdi_eeprom_value value_name, int value);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_buf(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_buf(const char *pcBUFFER_IN, size_t sizBUFFER_IN);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_user_data(const char *pcBUFFER_IN, size_t sizBUFFER_IN);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR read_location(int eeprom_addr, unsigned short *pusARGUMENT_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR write_location(int eeprom_addr, unsigned short eeprom_val);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR read();
	RESULT_INT_TRUE_OR_NIL_WITH_ERR write();
	RESULT_INT_TRUE_OR_NIL_WITH_ERR erase();
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR read_chipid(unsigned int *puiARGUMENT_OUT);

	const char *get_error_string(void);


private:
	struct ftdi_context *m_ptContext;
};



class Context
{
public:
	Context(void);
	~Context(void);

	/* Device detection. */
	List *usb_find_all(int vendor, int product);

	/* Device opening / closing. */
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open_dev(ListEntry *ptDevice);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open(int vendor, int product);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open_desc(int vendor, int product, const char *description, const char *serial);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open_desc_index(int vendor, int product, const char *description, const char *serial, unsigned int index);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open_bus_addr(uint8_t bus, uint8_t addr);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_open_string(const char *description);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_close(void);

	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_interface(enum ftdi_interface interface);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_reset(void);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_purge_rx_buffer(void);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_purge_tx_buffer(void);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_purge_buffers(void);

	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_baudrate(int baudrate);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_line_property(enum ftdi_bits_type bits, enum ftdi_stopbits_type sbit, enum ftdi_parity_type parity);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_line_property(enum ftdi_bits_type bits, enum ftdi_stopbits_type sbit, enum ftdi_parity_type parity, enum ftdi_break_type break_type);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_bitmode(unsigned char bitmask, unsigned char mode);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR disable_bitbang(void);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_latency_timer(unsigned char latency);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR get_latency_timer(unsigned char *pucARGUMENT_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR setflowctrl(int flowctrl);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR setdtr(int state);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR setrts(int state);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR setdtr_rts(int dtr, int rts);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_event_char(unsigned char eventch, unsigned char enable);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR set_error_char(unsigned char errorch, unsigned char enable);

	RESULT_INT_NOTHING_OR_NIL_WITH_ERR read_data(char **ppcBUFFER_OUT, size_t *psizBUFFER_OUT, size_t sizRead);
	TransferControl *read_data_submit(size_t sizRead);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR read_pins(unsigned char *pucARGUMENT_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR write_data(const char *pcBUFFER_IN, size_t sizBUFFER_IN);
	TransferControl *write_data_submit(const char *pcBUFFER_IN, size_t sizBUFFER_IN);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR poll_modem_status(unsigned short *pusARGUMENT_OUT);

	RESULT_INT_TRUE_OR_NIL_WITH_ERR read_data_set_chunksize(unsigned int chunksize);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR read_data_get_chunksize(unsigned int *puiARGUMENT_OUT);
	RESULT_INT_TRUE_OR_NIL_WITH_ERR write_data_set_chunksize(unsigned int chunksize);
	RESULT_INT_NOTHING_OR_NIL_WITH_ERR write_data_get_chunksize(unsigned int *puiARGUMENT_OUT);

	Eeprom *eeprom(void);

	RESULT_INT_TRUE_OR_NIL_WITH_ERR usb_reset_device(void);

	const char *get_error_string(void);


private:
	struct ftdi_context *m_ptContext;
};


#endif  /* __WRAPPER_H__ */
